# Задача – оценить изменения параметров, выводимых утилитой top в процессе работы нескольких экземпляров созданного скрипта.
#
# Ход эксперимента:
# Создайте копию скрипта, созданного на предыдущем этапе, в файл mem2.bash. 
# Настройте её на запись в файл report2.log. 
#
# Создайте скрипт, который запустит немедленно друг за другом оба скрипта в фоновом режиме.
# Подготовьте две консоли. В первой запустите утилиту top. Во второй запустите созданный перед этим скрипт 
# и переключитесь на первую консоль. Убедитесь, что в top появились mem.bash и mem2.bash. 
# Наблюдайте за следующими значениями (и фиксируйте их изменения во времени в отчете):
# - значения параметров памяти системы (верхние две строки над основной таблицей);
# - значения параметров в строке таблицы, соответствующей работающему скрипту;
# - изменения в верхних пяти процессах (как меняется состав и позиции этих процессов).
# 
# Проводите наблюдения и фиксируйте их в отчете до аварийной остановки последнего 
# из двух скриптов и их исчезновения из перечня процессов в top.
# Посмотрите с помощью команды dmesg | grep "mem[2]*.bash" последние записи о скриптах в системном журнале 
# и зафиксируйте их в отчете. Также зафиксируйте значения в последних строках файлов report.log и report2.log.
#
#
#
# !/bin/bash

report="report.log"
> $report

counter=0
declare -a arr

trap "kill $top_pid" EXIT SIGINT SIGTERM 

while true;  do
    arr+=(1 2 3 4 5 6 7 8 9 10)
    counter=$((counter + 1))
    if ((counter % 10000 == 0)); then 
        echo "step: $counter, arr size: ${#arr[@]}" >> $report
    fi
done 

